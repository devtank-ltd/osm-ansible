- name: Check for btrfs /srv
  shell: |
    if [ -e /srv ]
    then
      srv_fs=$(df /srv -T | awk '/dev/ { print $2 }')
      if [ "$srv_fs" != 'btrfs' ]
      then
        echo "Requires btrfs /srv"
        exit -1
      fi
    else
      root_fs=$(df / -T | awk '/dev/ { print $2 }')
      if [ "$root_fs" != 'btrfs' ]
      then
        echo "Requires btrfs root or /srv"
        exit -1
      fi
      mkdir  -v -p -m 0755 -p /srv
    fi

- name: Install required packages
  apt:
    name:
      - ansible
      - btrfs-progs
      - certbot
      - git
      - golang-go
      - lxc
      - netdata
      - pebble
      - prometheus-node-exporter
      - python3-lxc
      - rsync
      - snapper
      - sudo
      - ufw
      - wireguard
    update_cache: yes

- name: Clone OSM Ansible git repo.
  ansible.builtin.git:
    repo: https://git.devtank.co.uk/Devtank/osm-ansible.git
    dest: /srv/osm-lxc
    single_branch: yes
    version: customers_certs

- name: "Prepare MiniCA"
  block:
    - name: "Fetch MiniCA sources from github"
      git:
        repo: https://github.com/jsha/minica.git
        dest: /srv/osm-lxc/utils/minica
        single_branch: yes
        version: master

    - name: "Build MiniCA"
      shell: go build
      args:
        chdir: /srv/osm-lxc/utils/minica

# TODO: move names to variables
- name: "Generate key and cert"
  shell: |
    ./minica -ca-cert devtank.minica.pem -ca-key devtank.minica.key.pem --domains localhost,{{ osm_domain }}
  args:
    chdir: /srv/osm-lxc/utils/minica

- name: "Prepare pebble configuration"
  block:
    - name: "Create pebble configuration directory"
      file:
        path: /srv/osm-lxc/configs/pebble/
        state: directory

    - name: "Create pebble configuration file"
      copy:
        dest: "/srv/osm-lxc/configs/pebble/pebble-config.json"
        content: |
          {
            "pebble": {
              "listenAddress": "0.0.0.0:14000",
              "managementListenAddress": "0.0.0.0:15000",
              "certificate": "/srv/osm-lxc/configs/pebble/localhost/cert.pem",
              "privateKey": "/srv/osm-lxc/configs/pebble/localhost/key.pem",
              "httpPort": 5002,
              "tlsPort": 5001,
              "ocspResponderURL": "",
              "externalAccountBindingRequired": false
            }
          }

# TODO: bash for names expansion?
- name: "Copy certificates to pebble configuration directory"
  shell: |
    cp devtank.minica.pem /srv/osm-lxc/configs/pebble/
    cp devtank.minica.key.pem /srv/osm-lxc/configs/pebble/
    cp -r localhost /srv/osm-lxc/configs/pebble/
  args:
    chdir: /srv/osm-lxc/utils/minica

- name: "Install pebble systemd service"
  copy:
    src: /srv/osm-lxc/orchestrator/env/dist/systemd/pebble.service
    dest: /etc/systemd/system/
    remote_src: yes

- name: "Install pebble systemd service"
  copy:
    src: /srv/osm-lxc/orchestrator/env/dist/systemd/pebble-challtestsrv.service
    dest: /etc/systemd/system/
    remote_src: yes

- name: "Start pebble-challtestsrv"
  systemd_service:
    name: pebble-challtestsrv
    state: started
    daemon_reload: true
    enabled: true

- name: "Start pebble ACME"
  systemd_service:
    name: pebble
    state: restarted
    enabled: true

- name: Check for LetsEncrypt setup
  stat:
     path: /etc/letsencrypt/live/{{ osm_host_name }}.{{ osm_domain }}
  register: letsencryt_folder_exists

- name: Setup LetsEncrypt
  # shell: certbot certonly --standalone -d {{ osm_host_name }}.{{ osm_domain }}
  shell: |
    REQUESTS_CA_BUNDLE=devtank.minica.pem \
    certbot certonly --standalone \
    -d {{ osm_host_name }}.{{ osm_domain }} \
    --server https://localhost:14000/dir \
    --agree-tos \
    --no-verify-ssl \
    --http-01-port=5002 \
    --register-unsafely-without-email
  when: not letsencryt_folder_exists.stat.exists

- name: Change Certbot update to be NGINX
  shell: |
    # sed -i 's|standalone|nginx|g' /etc/letsencrypt/renewal/{{ osm_host_name }}.{{ osm_domain }}.conf
    echo "installer = nginx" >> /etc/letsencrypt/renewal/{{ osm_host_name }}.{{ osm_domain }}.conf

- name: Install NGINX required packages
  apt:
    name:
      - nginx
      - libnginx-mod-stream
      - python3-certbot-nginx
    update_cache: yes

- name: Add OSM orchestrator user
  ansible.builtin.user:
    name: osm_orchestrator
    comment: OSM Orchestrator
    create_home: yes
    group: users

- name: Add netdata main config
  copy:
    src: templates/netdata/netdata.conf
    dest: /etc/netdata/netdata.conf

- name: Add netdata cgroups config
  copy:
    src: templates/netdata/cgroups.conf
    dest: /etc/netdata/python.d/cgroups.conf

- name: Restart netdata
  ansible.builtin.service:
    name: netdata
    state: restarted

- name: Apply OSM Host overlay.
  shell: rsync -a /srv/osm-lxc/root_overlay/ /

- name: Update OSM Host overlay NGINX with hostname
  ansible.builtin.replace:
    path: /etc/nginx/nginx.conf
    regexp: 'OSM_HOST_NAME'
    replace: "{{ osm_host_name }}"

- name: Update OSM Host overlay NGINX with domain
  ansible.builtin.replace:
    path: /etc/nginx/nginx.conf
    regexp: 'OSM_DOMAIN'
    replace: "{{ osm_domain }}"

- name: Create a OSM Host Base OS container
  community.general.lxc_container:
    name: base-os
    container_log: true
    template: debian
    state: stopped
    template_options: bookworm

- name: Patch lxc-net script to support MTU setting
  ansible.posix.patch:
    src: patches/0001-lxc-net-add-bridge-MTU-support.patch
    basedir: /usr/libexec/lxc
    strip: 1

- name: OSM Host Base OS container prep
  shell: |
    [ -d /root/.ssh/id_rsa.pub ] | ssh-keygen -q  -t rsa -N '' -f /root/.ssh/id_rsa
    mkdir -p /var/lib/lxc/base-os/rootfs/root/.ssh
    cat /root/.ssh/id_rsa.pub >> /var/lib/lxc/base-os/rootfs/root/.ssh/authorized_keys
    echo '
    LXC_BRIDGE="lxcbr0"
    LXC_ADDR="10.0.3.1"
    LXC_NETMASK="255.255.255.0"
    LXC_NETWORK="10.0.3.0/24"
    LXC_DHCP_RANGE="10.0.3.2,10.0.3.254"
    LXC_DHCP_MAX="253"
    LXC_DHCP_CONFILE=/etc/lxc/dnsmasq.conf
    LXC_DOMAIN="lxc"' >> /etc/default/lxc-net
    mac_addr=$(awk -F ' = ' '/lxc.net.0.hwaddr/ {print $2}' /var/lib/lxc/base-os/config)
    echo "dhcp-host=$mac_addr,10.0.3.2" > /etc/lxc/dnsmasq.conf
    systemctl restart lxc-net

- name: Start OSM Host Base OS container
  community.general.lxc_container:
    name: base-os
    state: started

- name: Make OSM Host Base OS Ansible ready
  community.general.lxc_container:
    name: base-os
    container_command: apt install -y python3 wget python3-apt

- name: Ready host to use Ansible on OSM Host Base OS
  shell: |
    ssh-keyscan -H 10.0.3.2 > /root/.ssh/known_hosts
    echo 10.0.3.2 > /tmp/hosts

- name: Run setup Ansible on OSM Host Base OS
  shell: |
    cd /srv/osm-lxc/ansible/
    ansible-playbook -e "target=10.0.3.2" -i /tmp/hosts setup-base-os.yaml

- name: Add Go GC work rounds
  shell: |
    printf "GOMEMLIMIT=300MiB\nGOGC=50" >> /var/lib/lxc/base-os/rootfs/etc/default/influxdb2
    printf "GOMEMLIMIT=300MiB\nGOGC=50" >> /var/lib/lxc/base-os/rootfs/etc/default/grafana-server

- name: Stop OSM Host Base OS container
  community.general.lxc_container:
    name: base-os
    state: stopped

- name: Use OSM Host Base OS container to create OSM Host OS Base
  shell: |
    mkdir -p /srv/osm-lxc/lxc/os-bases
    mv /var/lib/lxc/base-os/rootfs /srv/osm-lxc/lxc/os-bases/001-bookworm-$(date "+%d-%m-%Y")
    rm -rf /var/lib/lxc/base-os/config
