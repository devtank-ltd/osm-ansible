- hosts: "{{ target }}"
  vars:
    wg_ipaddr: "{{ wg_ipaddr }}"
    wg_port: "{{ wg_port }}"
    orchestrator_private_key: "{{ orchestrator_private_key }}"

  tasks:

    - name: "Setting host's network interface fact"
      set_fact:
        wg_interface: "{{ ansible_default_ipv4.interface }}"

    - name: Install required packages
      apt:
        name:
          - ansible
          - default-mysql-client
          - default-mysql-server
          - git
          - iproute2
          - iptables
          - pdns-backend-mysql
          - prometheus
          - prometheus-alertmanager
          - pebble
          - golang-go
          - python3
          - python3-crcmod
          - python3-paramiko
          - python3-pymysql
          - python3-yaml
          - wireguard
        update_cache: yes

    - name: Clone OSM Ansible git repo.
      ansible.builtin.git:
        repo: https://git.devtank.co.uk/Devtank/osm-ansible.git
        dest: /srv/osm-lxc
        single_branch: yes
        version: main

    - name: "Prepare MiniCA"
      block:
        - name: "Fetch MiniCA sources from github"
          git:
            repo: https://github.com/jsha/minica.git
            dest: /srv/osm-lxc/utils/minica
            single_branch: yes
            version: master

        - name: "Build MiniCA"
          shell: go build
          args:
            chdir: /srv/osm-lxc/utils/minica

    # TODO: move names to variables
    - name: "Generate key and cert"
      shell: |
        ./minica -ca-cert devtank.minica.pem -ca-key devtank.minica.key.pem --domains localhost,{{ osm_domain }}
      args:
        chdir: /srv/osm-lxc/utils/minica

    - name: "Prepare pebble configuration"
      block:
        - name: "Create pebble configuration directory"
          file:
            path: /srv/osm-lxc/configs/pebble/
            state: directory

        - name: "Create pebble configuration file"
          copy:
            dest: "/srv/osm-lxc/configs/pebble/pebble-config.json"
            content: |
              {
                "pebble": {
                  "listenAddress": "0.0.0.0:14000",
                  "managementListenAddress": "0.0.0.0:15000",
                  "certificate": "/srv/osm-lxc/configs/pebble/localhost/cert.pem",
                  "privateKey": "/srv/osm-lxc/configs/pebble/localhost/key.pem",
                  "httpPort": 5002,
                  "tlsPort": 5001,
                  "ocspResponderURL": "",
                  "externalAccountBindingRequired": false
                }
              }

    # TODO: bash for names expansion?
    - name: "Copy certificates to pebble configuration directory"
      shell: |
        cp devtank.minica.pem /srv/osm-lxc/configs/pebble/
        cp devtank.minica.key.pem /srv/osm-lxc/configs/pebble/
        cp -r localhost /srv/osm-lxc/configs/pebble/
      args:
        chdir: /srv/osm-lxc/utils/minica

    - name: "Install pebble systemd service"
      copy:
        src: /srv/osm-lxc/orchestrator/env/dist/systemd/pebble.service
        dest: /etc/systemd/system/
        remote_src: yes

    - name: "Install pebble systemd service"
      copy:
        src: /srv/osm-lxc/orchestrator/env/dist/systemd/pebble-challtestsrv.service
        dest: /etc/systemd/system/
        remote_src: yes

    - name: Stop PDNS
      service:
        name: pdns.service
        state: stopped

    - name: "Start pebble-challtestsrv"
      systemd_service:
        name: pebble-challtestsrv
        state: started
        daemon_reload: true
        enabled: true
      tags: pebble

    - name: "Start pebble ACME"
      systemd_service:
        name: pebble
        state: restarted
        enabled: true
      tags: pebble

    - name: "Create PDNS DB Password"
      ansible.builtin.set_fact:
        pdns_db_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=16, chars=['ascii_letters', 'digits']) }}"

    - name: Setup PDNS MySQL
      shell: |
        echo "CREATE DATABASE pdns;\
        GRANT ALL ON pdns.* to pdns@localhost IDENTIFIED BY '{{ pdns_db_password }}';\
        FLUSH PRIVILEGES;" | mysql -uroot
        cat /usr/share/doc/pdns-backend-mysql/schema.mysql.sql | mysql -uroot pdns

    - name: "Add MySQL setup to PDNS"
      shell:
        printf "#### MYSQL CONFIG\n
        launch=gmysql\n
        gmysql-host=127.0.0.1\n
        gmysql-port=3306\n
        gmysql-dbname=pdns\n
        gmysql-user=pdns\n
        gmysql-password={{ pdns_db_password }}\n
        gmysql-dnssec=no" > /etc/powerdns/pdns.d/mysql.conf

    - name: Remove PDNS bind file
      file:
        state: absent
        path: "/etc/powerdns/pdns.d/bind.conf"

    - name: "Populate PDNS MySQL"
      shell: |
        echo "INSERT INTO domains (id,name,type) values (1,'{{ osm_domain }}','MASTER');
        INSERT INTO records (domain_id,name,type,prio,content,ttl) VALUES (1,'{{ osm_domain }}','SOA',0,'{{ osm_host_name }}.{{ osm_domain }} hostmaster.{{ osm_domain }} 20230717 10800 10800 108000 1800',1800);
        INSERT INTO records (domain_id,name,type,prio,content,ttl) VALUES (1,'{{ osm_domain }}','NS',0,'{{ osm_host_name }}.{{ osm_domain }}',10800);
        INSERT INTO records (domain_id,name,type,prio,content,ttl) VALUES (1,'{{ osm_host_name }}.{{ osm_domain }}','A',0,'{{ osm_dns }}',10800);
        " | mysql -uroot pdns

    - name: "Create OSM Orchestrator DB Password"
      ansible.builtin.set_fact:
        osm_orchestrator_db_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=16, chars=['ascii_letters', 'digits']) }}"

    - name: "Create OSM Orchestrator DB"
      shell: |
        cat /srv/osm-lxc/orchestrator/schema.sql | sed 's|change_this_password|{{ osm_orchestrator_db_password }}|g' |  mysql -uroot

    - name: "Write out OSM Orchestrator Config"
      vars:
        object:
            orchestrator:
                user: 'osm_orchestrator'
                password: '{{ osm_orchestrator_db_password }}'
                host: 'localhost'
                database: 'osm_orchestrator'
            pdns:
                user: 'osm_orchestrator'
                password: '{{ osm_orchestrator_db_password }}'
                host: 'localhost'
                database: 'pdns'
            pdns_domain: '{{ osm_domain }}'
            pdns_domain_id: 1
      copy:
        content: "{{ object | to_nice_yaml(indent=2) }}"
        dest: /srv/osm-lxc/orchestrator/config.yaml

    - name: Restart PDNS
      service:
        name: pdns.service
        state: started

    - name: "Enable IP forwarding"
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        state: present
        reload: true

    - name: "Populate OSM WireGuard table with initial data"
      shell: |
        echo "INSERT INTO osm_wireguard (id, osm_hosts_id, public_key, private_key, ip_addr) VALUES (1, NULL, '{{ orchestrator_public_key }}', '{{ orchestrator_private_key }}', '{{ wg_ipaddr }}');" | mysql -uroot osm_orchestrator

    - name: "Apply WireGuard configuration"
      template:
        src: "templates/orchestrator_wireguard.j2"
        dest: "/etc/wireguard/wg0.conf"

    - name: "Restart WireGuard"
      systemd_service:
        name: wg-quick@wg0.service
        state: restarted
        enabled: true

    - name: "Apply prometheus configuration file"
      template:
        src: "templates/prometheus/prometheus.yml.j2"
        dest: "/etc/prometheus/prometheus.yml"

    - name: "Apply prometheus alert rules"
      copy:
        src: "templates/prometheus/prometheus.rules"
        dest: "/etc/prometheus/prometheus.rules"

    - name: "Apply alertmanager configuration file"
      template:
        src: "templates/alertmanager/alertmanager.yml.j2"
        dest: "/etc/prometheus/alertmanager.yml"

    - name: "Restart prometheus"
      ansible.builtin.service:
        name: prometheus
        state: restarted

    - name: "Restart alertmanager"
      ansible.builtin.service:
        name: prometheus-alertmanager
        state: restarted
